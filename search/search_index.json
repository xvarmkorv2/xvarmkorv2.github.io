{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Welcome to the public documentation for stuff made or modified by me (xvarmkorv2)! This website, as said above provides documentation, usages, and about for modules I made.</p>"},{"location":"#contact-me","title":"Contact me!","text":""},{"location":"DeviceInfo/About/","title":"About","text":"Note <ul> <li>DeviceInfo only works on the client. Attempting to use this on the server will result a error upon loading the library.</li> <li>As of October 4 2021, detection is no longer guranteed to be 100% correct as there is ways the detection can lead to false positives.</li> </ul> <p>A note to users upgrading from V1 to V2</p> <p>The V2 update changes a lot of method names and how they work, it is suggested to re-read the source-code, the API reference, and update your code to match the new update.</p> <p>DeviceInfo is a module designed to try and detect the player's platform, device type, etc. Inspired by World Builder's device detection, this module uses hacky ways to try to detect the device type, platform, etc however it should be noted that detection cannot be guranteed 100% correct</p> <p>https://devforum.roblox.com/t/716491</p>"},{"location":"DeviceInfo/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub gist</li> <li>Roblox model</li> <li>Roblox place</li> </ul>"},{"location":"DeviceInfo/Usage/","title":"Usage","text":"<p>Not available</p>"},{"location":"DeviceInfo/API%20Reference/enum_DeviceOrientation/","title":"DeviceOrientation","text":"<pre><code>DeviceInfoEnum DeviceInfo.DeviceOrientation\n</code></pre> <p>Contains 2 enum members:</p> Member Description Portrait Determines that the device orientation is portrait. Landscape Determines that the device orientation is landscape."},{"location":"DeviceInfo/API%20Reference/enum_DeviceOrientation/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDeviceOrientation()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/enum_DeviceType/","title":"DeviceType","text":"<pre><code>DeviceInfoEnum DeviceInfo.DeviceType\n</code></pre> <p>Contains 5 enum members:</p> Member Description Computer Determines that the device type is a computer. Phone Determines that the device type is a phone. Tablet Determines that the device type is a tablet. Console Determines that the device type is a console. TouchscreenComputer Determines that the device type is a touchscreen computer."},{"location":"DeviceInfo/API%20Reference/enum_DeviceType/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDeviceType()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/enum_InputType/","title":"InputType","text":"<pre><code>DeviceInfoEnum DeviceInfo.InputType\n</code></pre> <p>Contains 6 enum members:</p> Member Description KeyboardMouse Determines that the device input type is keyboard and mouse. Mouse Determines that the device input type is mouse. Keyboard Determines that the device input type is keyboard. Gamepad Determines that the device input type is gamepas/controller. Touchscreen Determines that the device input type is touchscreen. VR Determines that the device input type is VR."},{"location":"DeviceInfo/API%20Reference/enum_InputType/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDeviceinput()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/enum_PlatformType/","title":"PlatformType","text":"<pre><code>DeviceInfoEnum DeviceInfo.PlatformType\n</code></pre> <p>Contains 3 enum members:</p> Member Description Computer Device platform is a computer. Mobile Device platform is a mobile device. Console Device platform is a console. <p>If you would like to determine if a user is using a phone or tablet, see <code>DeviceInfo.GetDeviceType()</code>.</p>"},{"location":"DeviceInfo/API%20Reference/enum_PlatformType/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDevicePlatform()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/event_GraphicsQualityChanged/","title":"GraphicsQualityChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.GraphicsQualityChanged: Enum.SavedQualitySetting\n</code></pre> <p>Upon fired, passes a <code>Enum.SavedQualitySetting</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/event_InputChanged/","title":"InputChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.InputChanged: DeviceInfoEnum.InputType\n</code></pre> <p>Upon fired, passes a <code>DeviceInfoEnum.InputType</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/event_OrientationChanged/","title":"OrientationChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.OrientationChanged: DeviceInfoEnum.DeviceOrientation\n</code></pre> <p>Upon fired, passes a <code>DeviceInfoEnum.DeviceOrientation</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/event_WindowSizeChanged/","title":"WindowSizeChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.WindowSizeChanged: Vector2\n</code></pre> <p>Upon fired, passes a <code>Vector2</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDeviceInput/","title":"GetDeviceInput()","text":"<pre><code>function DeviceInfo.GetDeviceInput(): DeviceInfoEnum.InputType\n</code></pre> <p>Returns <code>DeviceInfoEnum.InputType</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDeviceOrientation/","title":"GetDeviceOrientation()","text":"<pre><code>function DeviceInfo.GetDeviceOrientation(): DeviceInfoEnum.DeviceOrientation\n</code></pre> <p>Returns <code>DeviceInfoEnum.DeviceOrientation</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDevicePlatform/","title":"GetDevicePlatform()","text":"<pre><code>function DeviceInfo.GetDevicePlatform(): DeviceInfoEnum.PlatformType\n</code></pre> <p>Returns <code>DeviceInfoEnum.PlatformType</code>. Used to determine's the device platform. (Computer, console, or mobile)</p> <p>Not to be confused with <code>DeviceInfo.GetDeviceType()</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDeviceType/","title":"GetDeviceType()","text":"<pre><code>function DeviceInfo.GetDeviceType(): DeviceInfoEnum.DeviceType\n</code></pre> <p>Returns <code>DeviceInfoEnum.DeviceType</code>. Used to determine the device's type. (Computer, phone, tablet, console, touchscreen computer)</p> <p>Not to be confused with <code>DeviceInfo.GetDevicePlatform()</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetGraphicsQuality/","title":"GetGraphicsQuality()","text":"<pre><code>function DeviceInfo.GetGraphicsQuality(): Enum.SavedQualitySetting\n</code></pre> <p>Returns <code>Enum.SavedQualitySetting</code>. (equivalent of <code>UserSettings():GetService(\"UserGameSettings\").SavedQualityLevel</code>)</p>"},{"location":"DeviceInfo/API%20Reference/func_GetWindowSize/","title":"GetWindowSize()","text":"<pre><code>function DeviceInfo.GetWindowSize(): Vector2\n</code></pre> <p>Returns a <code>Vector2</code> of the window size. (equivalent of <code>workspace.CurrentCamera.ViewportSize</code>)</p>"}]}